import fs from "fs";
import path from "path";
import { browserLaunchHandler, getLogs, clearLogs } from "./browserLogs";
import {
  install,
  ensureBrowserFlags,
} from "@neuralegion/cypress-har-generator";
import { TestExecutionResult } from "./types";

const dumpDir = "./dump";
const harDir = "dump_har";
let id: string,
  meta: any,
  cy: any,
  rr: any,
  har: any,
  browserLogs: any,
  pluginMeta: any;

const createDumpFile = (data: TestExecutionResult) => {
  if (!fs.existsSync(dumpDir)) {
    fs.mkdirSync(dumpDir, { recursive: true });
  }

  fs.writeFileSync(
    path.join(dumpDir, `${id}.raw.json`),
    JSON.stringify(data, null, 2)
  );
};

const readHarData = (filename: string) => {
  const filePath = path.join(harDir, filename);
  const data = fs.readFileSync(filePath);
  const parsed = JSON.parse(data.toString("utf-8"));

  har = parsed;

  fs.unlinkSync(filePath);
};

const removeDir = (dir: string) => {
  if (fs.existsSync(dir)) {
    fs.rmdirSync(dir, { recursive: true });
  }
};

export const installPlugin = (
  on: Cypress.PluginEvents,
  options?: {
    meta: any;
    callback: Function;
  }
) => {
  // attach metadata to the generated files
  pluginMeta = options?.meta;

  on("task", {
    // called in "afterEach" hook with data from cypress & rrweb
    _curr_dump_events(
      data: Pick<TestExecutionResult, "id" | "cy" | "rr" | "meta">
    ) {
      id = data.id;
      cy = data.cy;
      rr = data.rr;
      meta = data.meta;

      // get current browser logs
      browserLogs = getLogs();
      clearLogs();

      return null;
    },

    log(...args: any[]) {
      console.log(args);
      return null;
    },

    // called in "afterEach" hook, used to read data generated by cypress-har-generator
    _read_har_data(filename: string) {
      readHarData(filename);
      return null;
    },

    // called the last in "afterEach" hook to create the dump file
    _create_dump_file() {
      const data = {
        id,
        meta,
        cy,
        rr,
        har,
        browserLogs,
        pluginMeta,
      };

      options?.callback(data);
      createDumpFile(data);
      return null;
    },

    // called in "after" hook to remove the temporary dump_har directory
    _remove_har_dir() {
      removeDir(harDir);
      return null;
    },
  });

  // install cypress-har-generator
  install(on);

  on("before:browser:launch", (browser: any = {}, launchOptions) => {
    // cypress-har-generator uses this event, details here: https://github.com/NeuraLegion/cypress-har-generator/blob/master/README.md?plain=1#L74
    ensureBrowserFlags(browser, launchOptions);

    // use chrome debugging protocol to listen to console events
    browserLaunchHandler(browser, launchOptions);

    return launchOptions;
  });
};
